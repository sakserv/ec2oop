#!/bin/bash
###################################################
#
#  Name: init_mapred
#  Purpose: Initial mapreduce setup
#  Author: Shane Kumpf
#
###################################################

#
# Base variables
#
SCRIPT_NAME=`basename $0`
SCRIPT_DIR=`cd $(dirname $0) && pwd`

#
# Functions
#
function usage
{
    echo "Usage: $SCRIPT_NAME -s <storm-yarn client node>"
    exit 1
}

#
# Validation
#
if [ `id -un` != "ec2-user" ]; then
    echo "ERROR: Must run as ec2-user"
    exit 1
fi

#
# Parse command line args
#
while getopts "s:" opt; do
    case $opt in
        s) 
            sclient=$OPTARG;;
        \?) 
            echo "Invalid option: -$OPTARG"; usage;;
    esac
done

if [ -z "$sclient" ]; then
    usage
fi

#
# Variables
#
work_dir="/tmp/work"
storm_yarn_work_dir="$work_dir/storm-yarn"
git_ec2oop_url="https://github.com/sakserv/ec2oop.git"
git_ec2_tools_url=" https://github.com/sakserv/ec2-tools"
git_storm_yarn_url=" https://github.com/sakserv/storm-yarn"
helpers_dir="$work_dir/ec2oop/helpers"
storm_conf_dir="$work_dir/ec2oop/helpers/configuration_files/storm"

#
# Prep work dir
#
node=$sclient
echo -e "\n#####  Setting up $work_dir on $node"
if ec2-ssh $node "test -d $work_dir";  then
    echo -e "\n#####  Cleaning up previous work directory $work_dir"
    ec2-ssh $node "rm -rf $work_dir" || exit 1
    echo "SUCCESS"
fi

# Create new work dir
if ! ec2-ssh $node "test -d $work_dir";  then
    echo -e "\n#####  Creating work directory $work_dir"
    ec2-ssh $node "mkdir -p $work_dir" || exit 1
    echo "SUCCESS"
fi

# git clone ec2-tools into work dir
echo -e "\n#####  Cloning ec2-tools repo"
ec2-ssh $node "(cd $work_dir && git clone $git_ec2_tools_url)" || exit 1
echo "SUCCESS"

# git clone ec2oop into work dir
echo -e "\n#####  Pulling repo $git_ec2oop_url to $work_dir"
ec2-ssh $node "(cd $work_dir && git clone $git_ec2oop_url)" || exit 1
echo "SUCCESS"

#
# Source helpers
#
source $helpers_dir/scripts/usersAndGroups.sh
source $helpers_dir/scripts/directories.sh

#
# Main
#
echo -e "\nStarting $SCRIPT_NAME at `date`"

# Get storm-yarn hadoop2.4.0 branch
echo -e "\n#####  Setting up $storm_yarn_work_dir on $node"
if ec2-ssh $node "test -d $storm_yarn_work_dir";  then
    echo -e "\n#####  Cleaning up previous work directory $storm_yarn_work_dir"
    ec2-ssh $node "rm -rf $storm_yarn_work_dir" || exit 1
    echo "SUCCESS"
fi
ec2-ssh $node "mkdir -p $storm_yarn_work_dir" || exit 1
echo "SUCCESS"

# git clone storm-yarn into work dir
echo -e "\n#####  Cloning storm-yarn repo: $git_storm_yarn_url"
ec2-ssh $node "(cd $storm_yarn_work_dir && git clone $git_storm_yarn_url)" || exit 1
ec2-ssh $node "(cd $storm_yarn_work_dir/storm-yarn && git checkout -b hadoop2.4.0)" || exit 1
ec2-ssh $node "(cd $storm_yarn_work_dir/storm-yarn && mvn package -DskipTests)" || exit 1
echo "SUCCESS"

# Copy storm-yarn into /usr/lib/storm-yarn
echo -e "\n#####  Copying $storm_yarn_work_dir/storm-yarn /usr/lib/storm-yarn"
ec2-ssh $node "sudo mkdir -p /usr/lib/storm-yarn" || exit 1
ec2-ssh $node "sudo cp -R $storm_yarn_work_dir/storm-yarn/* /usr/lib/storm-yarn/" || exit 1
echo "/usr/lib/storm-yarn contents:"
ec2-ssh $node "sudo find /usr/lib/storm-yarn" || exit 1
echo "SUCCESS"

# Copying storm.zip into /usr/lib/storm
if ! ec2-ssh $node "test -L $storm_yarn_work_dir/storm-yarn/lib/storm.zip"; then
    echo "ERROR: Unabled to find storm.zip symlink at $storm_yarn_work_dir/storm-yarn/lib/storm.zip"
    exit 1
fi
echo -e "\n#####  Extracting $storm_yarn_work_dir/storm-yarn/lib/storm.zip /usr/lib/"
ec2-ssh $node "cd /usr/lib && sudo unzip -o $storm_yarn_work_dir/storm-yarn/lib/storm.zip" || exit 1
storm_dir="/usr/lib/storm-0.9.0-wip21"
storm_ver="0.9.0-wip21"
echo "Storm version: $storm_ver"
echo "Storm path bin: $storm_dir/bin"
echo "SUCCESS"

# Copy storm.zip into hdfs
echo -e "\n#####  Copying storm.zip to HDFS"
set -x
ec2-ssh $node "sudo -u hdfs hdfs dfs -mkdir -p /lib/storm/$storm_ver" || exit 1
ec2-ssh $node "sudo -u hdfs hdfs dfs -put $storm_yarn_work_dir/storm-yarn/lib/storm.zip /lib/storm/$storm_ver/storm.zip" 
set +x
echo "/lib/storm/$storm_ver contents:"
ec2-ssh $node "sudo -u hdfs hdfs dfs -ls /lib/storm/$storm_ver" || exit 1
echo "SUCCESS"

# Copying storm.yaml
echo -e "\n#####  Copying $storm_conf_dir/storm.yaml to /etc/storm/conf in HDFS"
ec2-ssh $node "sudo mkdir -p /etc/storm/conf" || exit 1
ec2-ssh $node "sudo cp $storm_conf_dir/storm.yaml /etc/storm/conf/" || exit 1
echo "/etc/storm/conf contents:"
ec2-ssh $node "sudo find /etc/storm/conf/" || exit 1
echo "SUCCESS"

# Adding profile.d script for storm-yarn
if ec2-ssh $node "test -f /etc/profile.d/storm-yarn.sh"; then
    echo "Removing /etc/profile.d/storm-yarn.sh on $node"
    ec2-ssh $node "sudo rm /etc/profile.d/storm-yarn.sh" || exit 1
fi
ec2-ssh $node "echo 'export PATH=/usr/lib/storm-yarn/bin:'$storm_dir'/bin:$PATH' | sudo tee -a /etc/profile.d/storm-yarn.sh" || exit 1
ec2-ssh $node "sudo chmod 775 /etc/profile.d/storm-yarn.sh" || exit 1
echo "/etc/profile.d/storm-yarn.sh contents on $node:"
ec2-ssh $node "cat /etc/profile.d/storm-yarn.sh" || exit 1
echo "SUCCESS"


echo -e "\nFinished $SCRIPT_NAME at `date`"
exit 0
